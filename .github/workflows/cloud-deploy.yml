# Build docker image and deploy to google cloud run

name: cloud_deploy

# Deprecated in favour of buildx version
on:
  push:
    branches:
      - DEPRECATED

env:
  REGION: europe-west1
  PROJECT_ID: e-picsa
  REPOSITORY: epicsa-images
  SERVICE: epicsa-climate-api

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Decode and populate service account credentials
      - name: Write data service account JSON
        id: service-account
        run: |
          echo ${{secrets.EPICSA_DATA_SA_KEY_B64}} | base64 --decode  > app/service-account.json

      # Authenticate to google cloud with service account
      # https://github.com/google-github-actions/auth#authenticating-via-service-account-key-json
      # https://cloud.google.com/artifact-registry/docs/access-control
      - id: "auth"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: ${{secrets.GCP_SA_KEY_B64}}
          token_format: "access_token"

      # Login to artifact repository using same credentials as above (could use output token instead of user/pass)
      - name: Login to GAR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGION }}-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Build and Upload (manual)
        id: build
        run: |-
          docker build -t "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{github.sha}}" .
          docker push "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{github.sha}}"

    outputs:
      imageName: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{github.sha}}

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{secrets.GCP_SA_KEY_B64}}
          token_format: "access_token"

      - name: Login to GAR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGION }}-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      # Deploy to google cloud
      # https://github.com/google-github-actions/deploy-cloudrun
      # https://cloud.google.com/run/docs/reference/iam/roles#additional-configuration
      # requires additional "service account user" and "cloud run admin" roles
      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}

          # https://github.com/docker/build-push-action/issues/554

          # image: ${{ fromJSON(steps.build.outputs.metadata)['image.name']}}

          image: ${{ needs.build.outputs.imageName }}
          project_id: ${{ env.PROJECT_ID }}
          labels: |
            commit-sha=${{github.sha}}
          # provide connection to production database and service-account
          env_vars: |
            EPICSA_DATA_AUTH_TOKEN=${{secrets.EPICSA_DATA_AUTH_TOKEN}}

      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
