# Build docker image and deploy to google cloud run

# Note - while a similar build/deploy pipeline can be triggered directly from google cloud builder and run
# this github action provides more flexibility for customising build variables, deployment targets,
# tags, and build time resources

# In order to run secrets will need to be provided for:
# GCP_PROJECT - id of project from where google cloud run will be deployed
# GCP_SA_KEY_B64 - base64 encoded service account with sufficient permissions for deploying (see various links throughout)
# EPICSA_DATA_AUTH_TOKEN - auth token for access to e-picsa data (same as in local .env file)

# Service Account Required Permissions (see notes in individual google actions)
# - Cloud Run Admin
# - Cloud Run Sevice Agent (?) (comments in https://stackoverflow.com/a/55788899/5693245)
# - Service Account Token Creator (?)
# - Artifact registry admin (initial build)
# - be a member of PROJECT_NUMBER-compute@developer.gserviceaccount.com), with role Service Account User

name: cloud_deploy

on:
  push:
    branches:
      - main
      - feat/fast-api
env:
  REGION: europe-west1
  PROJECT_ID: glossy-attic-237012
  SERVICE_NAME: epicsa-python
  IMAGE_NAME: epicsa-python

jobs:
  cloud_deploy:
    runs-on: ubuntu-latest
    # https://github.com/docker/build-push-action/issues/171
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Authenticate to google cloud with service account
      # https://github.com/google-github-actions/auth#authenticating-via-service-account-key-json
      # https://cloud.google.com/artifact-registry/docs/access-control
      - id: "auth"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: ${{secrets.GCP_SA_KEY_B64}}
          token_format: "access_token"

      # Login to artifact repository using same credentials as above (could use output token instead of user/pass)
      - name: Login to GAR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGION }}-docker.pkg.dev
          username: _json_key_base64
          password: ${{ secrets.GCP_SA_KEY_B64 }}

      - name: Set SHA short output
          id: vars
          run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/${{ env.IMAGE_NAME }}
          # Manually set sha tag as auto-set harder to extract after
          tags: |
            type=raw,value=${{steps.vars.outputs.sha_short}}
            type=semver,pattern={{version}},value=v1.0.0

          # Overwrite labels to ensure cloud run compliance (will upload to artifact registry but not to cloud run)
          # https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements
          # labels: |
          #   org.opencontainers.image.vendor=MyCompany
          #   org.opencontainers.image.title=epicsa-climate-api
          #   org.opencontainers.image.description=""
          #   org.opencontainers.image.url=https://github.com/IDEMSInternational/epicsa-climate-api
          #   org.opencontainers.image.source=https://github.com/IDEMSInternational/epicsa-climate-api
          #   org.opencontainers.image.version=latest
          #   org.opencontainers.image.created=2023-01-25T20:30:24.293Z
          #   org.opencontainers.image.revision=fc880e35ea4678a68aba1703fcfb57dbf88d8209
          #   org.opencontainers.image.licenses=

      

      - name: Check outputs
        run: |
          echo ${{ steps.meta.outputs.json }}
          echo $DOCKER_METADATA_OUTPUT_JSON

      # run: |
      #     echo meta: ${{ steps.meta.outputs.json }}
      #     echo tags1: ${{ steps.meta.outputs.tags }}
      #     echo tags2: ${{ steps.meta.outputs.tags[0] }}
      #     echo tags3: ${{ fromJSON(steps.meta.outputs.tags)[0] }}

      - name: Build
        id: build
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          # NOTE - avoid passing labels as seems to break google cloud deployment (says image not found)
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha, scope=${{ github.workflow }}
          cache-to: type=gha, scope=${{ github.workflow }}, mode=max

      # Deploy to google cloud
      # https://cloud.google.com/run/docs/reference/iam/roles#additional-configuration
      # requires additional "service account user" and "cloud run admin" roles
      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.SERVICE_NAME }}
          # https://github.com/docker/build-push-action/issues/554

          # image: ${{ fromJSON(steps.build.outputs.metadata)['image.name']}}

          image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/${{ env.IMAGE_NAME }}:1.0.0
          region: ${{ env.REGION }}
          # provide connection to production database
          env_vars: |
            EPICSA_DATA_AUTH_TOKEN=${{secrets.EPICSA_DATA_AUTH_TOKEN}}

      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
