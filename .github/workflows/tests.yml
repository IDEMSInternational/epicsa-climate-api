name: Run Pytest

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade -r requirements.txt
        pip install --force-reinstall -r requirements_picsa.txt

    - name: Install R
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: '4.2.3' 

#    - name: Install R and R Tools
#      run: |
#        sudo apt-get update
#        sudo apt-get install -y r-base
#        # Install libcurl dependencies
#        sudo apt-get install -y libcurl4-openssl-dev        
##        wget https://cran.rstudio.com/src/base/R-4/R-4.2.3.tar.gz
#        tar -zxvf R-4.2.3.tar.gz
#        cd R-4.2.3
#        ./configure
#        make
#        sudo make install

#    - name: Set R Library Paths
#      run: |
#        export LD_LIBRARY_PATH=/usr/local/lib/R/lib:$LD_LIBRARY_PATH

#    - name: Check LD_LIBRARY_PATH
#      run: python -m rpy2.situation LD_LIBRARY_PATH


    - name: Install R Packages
      run: |
        sudo apt-get update
        sudo apt-get install -y libharfbuzz-dev libfribidi-dev libfreetype6-dev libnetcdf-dev

        sudo Rscript -e 'install.packages("PCICt", repos="http://cran.rstudio.com/")'
        sudo Rscript -e 'install.packages("Rcpp", repos="http://cran.rstudio.com/")'
        sudo Rscript -e 'install.packages("https://pacificclimate.org/R/climdex.pcic_1.1-11.tar.gz")'

        sudo Rscript -e 'install.packages(c("pkgdown"), repos="http://cran.rstudio.com/")'
        sudo Rscript install_packages.R
        sudo Rscript install_packages_picsa.R

#    - name: Update R Packages
#      run: |
#        sudo Rscript -e 'update.packages(ask = FALSE, checkBuilt = TRUE, repos="http://cran.rstudio.com/")'


    - name: Debug R Environment
      run: |
        sudo Rscript -e 'sessionInfo()'
    
    - name: Create service-account.json
      run: echo "$SERVICE_ACCOUNT_JSON" > app/service-account.json

    - name: Create service-account.json again
      run: echo "$SERVICE_ACCOUNT_JSON" > service-account.json

#    - name: Test with pytest
#      run: |
#        pip install pytest pytest-cov
#        pytest tests.py --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html

    - name: Run Pytest
      run: |
        pytest --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html

    - name: Upload pytest test results
      uses: actions/upload-artifact@v3
      with:
        name: pytest-results
        path: junit/test-results.xml
        # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}
